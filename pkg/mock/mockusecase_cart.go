// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/cart.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/aarathyaadhiv/ecommerce-fashionsture-cleanarch.git/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCartUseCase is a mock of CartUseCase interface.
type MockCartUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCartUseCaseMockRecorder
}

// MockCartUseCaseMockRecorder is the mock recorder for MockCartUseCase.
type MockCartUseCaseMockRecorder struct {
	mock *MockCartUseCase
}

// NewMockCartUseCase creates a new mock instance.
func NewMockCartUseCase(ctrl *gomock.Controller) *MockCartUseCase {
	mock := &MockCartUseCase{ctrl: ctrl}
	mock.recorder = &MockCartUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUseCase) EXPECT() *MockCartUseCaseMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartUseCase) AddToCart(cartId, productId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", cartId, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartUseCaseMockRecorder) AddToCart(cartId, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartUseCase)(nil).AddToCart), cartId, productId)
}

// EmptyCart mocks base method.
func (m *MockCartUseCase) EmptyCart(cartId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyCart", cartId)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmptyCart indicates an expected call of EmptyCart.
func (mr *MockCartUseCaseMockRecorder) EmptyCart(cartId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyCart", reflect.TypeOf((*MockCartUseCase)(nil).EmptyCart), cartId)
}

// RemoveFromCart mocks base method.
func (m *MockCartUseCase) RemoveFromCart(cartId uint, ProductId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", cartId, ProductId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartUseCaseMockRecorder) RemoveFromCart(cartId, ProductId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartUseCase)(nil).RemoveFromCart), cartId, ProductId)
}

// ShowProductInCart mocks base method.
func (m *MockCartUseCase) ShowProductInCart(cartId uint, pages, counts string) ([]models.CartProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowProductInCart", cartId, pages, counts)
	ret0, _ := ret[0].([]models.CartProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowProductInCart indicates an expected call of ShowProductInCart.
func (mr *MockCartUseCaseMockRecorder) ShowProductInCart(cartId, pages, counts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowProductInCart", reflect.TypeOf((*MockCartUseCase)(nil).ShowProductInCart), cartId, pages, counts)
}

// TotalAmountInCart mocks base method.
func (m *MockCartUseCase) TotalAmountInCart(cartId uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalAmountInCart", cartId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalAmountInCart indicates an expected call of TotalAmountInCart.
func (mr *MockCartUseCaseMockRecorder) TotalAmountInCart(cartId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalAmountInCart", reflect.TypeOf((*MockCartUseCase)(nil).TotalAmountInCart), cartId)
}

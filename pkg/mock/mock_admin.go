// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/admin.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	models "github.com/aarathyaadhiv/ecommerce-fashionsture-cleanarch.git/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// AdminDetails mocks base method.
func (m *MockAdminRepository) AdminDetails(id uint) (models.AdminDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDetails", id)
	ret0, _ := ret[0].(models.AdminDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminDetails indicates an expected call of AdminDetails.
func (mr *MockAdminRepositoryMockRecorder) AdminDetails(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDetails", reflect.TypeOf((*MockAdminRepository)(nil).AdminDetails), id)
}

// BlockUser mocks base method.
func (m *MockAdminRepository) BlockUser(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockAdminRepositoryMockRecorder) BlockUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockAdminRepository)(nil).BlockUser), id)
}

// CheckAdminAvailability mocks base method.
func (m *MockAdminRepository) CheckAdminAvailability(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdminAvailability", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAdminAvailability indicates an expected call of CheckAdminAvailability.
func (mr *MockAdminRepositoryMockRecorder) CheckAdminAvailability(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdminAvailability", reflect.TypeOf((*MockAdminRepository)(nil).CheckAdminAvailability), email)
}

// DashboardAmount mocks base method.
func (m *MockAdminRepository) DashboardAmount() (models.DashboardAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardAmount")
	ret0, _ := ret[0].(models.DashboardAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardAmount indicates an expected call of DashboardAmount.
func (mr *MockAdminRepositoryMockRecorder) DashboardAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardAmount", reflect.TypeOf((*MockAdminRepository)(nil).DashboardAmount))
}

// DashboardOrders mocks base method.
func (m *MockAdminRepository) DashboardOrders() (models.DashboardOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardOrders")
	ret0, _ := ret[0].(models.DashboardOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardOrders indicates an expected call of DashboardOrders.
func (mr *MockAdminRepositoryMockRecorder) DashboardOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardOrders", reflect.TypeOf((*MockAdminRepository)(nil).DashboardOrders))
}

// DashboardProduct mocks base method.
func (m *MockAdminRepository) DashboardProduct() (models.DashboardProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardProduct")
	ret0, _ := ret[0].(models.DashboardProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardProduct indicates an expected call of DashboardProduct.
func (mr *MockAdminRepositoryMockRecorder) DashboardProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardProduct", reflect.TypeOf((*MockAdminRepository)(nil).DashboardProduct))
}

// DashboardRevenue mocks base method.
func (m *MockAdminRepository) DashboardRevenue() (models.DashboardRevenue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardRevenue")
	ret0, _ := ret[0].(models.DashboardRevenue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardRevenue indicates an expected call of DashboardRevenue.
func (mr *MockAdminRepositoryMockRecorder) DashboardRevenue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardRevenue", reflect.TypeOf((*MockAdminRepository)(nil).DashboardRevenue))
}

// DashboardUsers mocks base method.
func (m *MockAdminRepository) DashboardUsers() (models.DashboardUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardUsers")
	ret0, _ := ret[0].(models.DashboardUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DashboardUsers indicates an expected call of DashboardUsers.
func (mr *MockAdminRepositoryMockRecorder) DashboardUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardUsers", reflect.TypeOf((*MockAdminRepository)(nil).DashboardUsers))
}

// FindByEmail mocks base method.
func (m *MockAdminRepository) FindByEmail(email string) (models.AdminSignUpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(models.AdminSignUpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAdminRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAdminRepository)(nil).FindByEmail), email)
}

// IsBlocked mocks base method.
func (m *MockAdminRepository) IsBlocked(id uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockAdminRepositoryMockRecorder) IsBlocked(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockAdminRepository)(nil).IsBlocked), id)
}

// ListUsers mocks base method.
func (m *MockAdminRepository) ListUsers(page, count int) ([]models.AdminUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", page, count)
	ret0, _ := ret[0].([]models.AdminUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAdminRepositoryMockRecorder) ListUsers(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAdminRepository)(nil).ListUsers), page, count)
}

// SalesReport mocks base method.
func (m *MockAdminRepository) SalesReport(startDate, endDate time.Time) (models.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesReport", startDate, endDate)
	ret0, _ := ret[0].(models.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesReport indicates an expected call of SalesReport.
func (mr *MockAdminRepositoryMockRecorder) SalesReport(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesReport", reflect.TypeOf((*MockAdminRepository)(nil).SalesReport), startDate, endDate)
}

// Save mocks base method.
func (m *MockAdminRepository) Save(admin models.AdminSignUp) (models.AdminDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", admin)
	ret0, _ := ret[0].(models.AdminDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAdminRepositoryMockRecorder) Save(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAdminRepository)(nil).Save), admin)
}

// UnblockUser mocks base method.
func (m *MockAdminRepository) UnblockUser(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockAdminRepositoryMockRecorder) UnblockUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockAdminRepository)(nil).UnblockUser), id)
}

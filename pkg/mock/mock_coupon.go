// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/coupon.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/aarathyaadhiv/ecommerce-fashionsture-cleanarch.git/pkg/domain"
	models "github.com/aarathyaadhiv/ecommerce-fashionsture-cleanarch.git/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCouponRepository is a mock of CouponRepository interface.
type MockCouponRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouponRepositoryMockRecorder
}

// MockCouponRepositoryMockRecorder is the mock recorder for MockCouponRepository.
type MockCouponRepositoryMockRecorder struct {
	mock *MockCouponRepository
}

// NewMockCouponRepository creates a new mock instance.
func NewMockCouponRepository(ctrl *gomock.Controller) *MockCouponRepository {
	mock := &MockCouponRepository{ctrl: ctrl}
	mock.recorder = &MockCouponRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponRepository) EXPECT() *MockCouponRepositoryMockRecorder {
	return m.recorder
}

// AddCoupon mocks base method.
func (m *MockCouponRepository) AddCoupon(coupon models.AddCoupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupon", coupon)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockCouponRepositoryMockRecorder) AddCoupon(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockCouponRepository)(nil).AddCoupon), coupon)
}

// AddUserCoupon mocks base method.
func (m *MockCouponRepository) AddUserCoupon(couponId string, userId, count uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserCoupon", couponId, userId, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserCoupon indicates an expected call of AddUserCoupon.
func (mr *MockCouponRepositoryMockRecorder) AddUserCoupon(couponId, userId, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserCoupon", reflect.TypeOf((*MockCouponRepository)(nil).AddUserCoupon), couponId, userId, count)
}

// BlockCoupon mocks base method.
func (m *MockCouponRepository) BlockCoupon(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCoupon", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockCoupon indicates an expected call of BlockCoupon.
func (mr *MockCouponRepositoryMockRecorder) BlockCoupon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCoupon", reflect.TypeOf((*MockCouponRepository)(nil).BlockCoupon), id)
}

// CouponDetails mocks base method.
func (m *MockCouponRepository) CouponDetails(couponId string) (domain.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CouponDetails", couponId)
	ret0, _ := ret[0].(domain.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CouponDetails indicates an expected call of CouponDetails.
func (mr *MockCouponRepositoryMockRecorder) CouponDetails(couponId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CouponDetails", reflect.TypeOf((*MockCouponRepository)(nil).CouponDetails), couponId)
}

// ExpireCoupon mocks base method.
func (m *MockCouponRepository) ExpireCoupon(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireCoupon", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireCoupon indicates an expected call of ExpireCoupon.
func (mr *MockCouponRepositoryMockRecorder) ExpireCoupon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireCoupon", reflect.TypeOf((*MockCouponRepository)(nil).ExpireCoupon), id)
}

// GetCoupon mocks base method.
func (m *MockCouponRepository) GetCoupon(page, count int) ([]domain.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoupon", page, count)
	ret0, _ := ret[0].([]domain.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoupon indicates an expected call of GetCoupon.
func (mr *MockCouponRepositoryMockRecorder) GetCoupon(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoupon", reflect.TypeOf((*MockCouponRepository)(nil).GetCoupon), page, count)
}

// IsExist mocks base method.
func (m *MockCouponRepository) IsExist(couponId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", couponId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockCouponRepositoryMockRecorder) IsExist(couponId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockCouponRepository)(nil).IsExist), couponId)
}

// IsExpired mocks base method.
func (m *MockCouponRepository) IsExpired(coupon string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired", coupon)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockCouponRepositoryMockRecorder) IsExpired(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockCouponRepository)(nil).IsExpired), coupon)
}

// IsUserUsed mocks base method.
func (m *MockCouponRepository) IsUserUsed(couponId string, userId uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserUsed", couponId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserUsed indicates an expected call of IsUserUsed.
func (mr *MockCouponRepositoryMockRecorder) IsUserUsed(couponId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserUsed", reflect.TypeOf((*MockCouponRepository)(nil).IsUserUsed), couponId, userId)
}

// UnBlockCoupon mocks base method.
func (m *MockCouponRepository) UnBlockCoupon(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockCoupon", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnBlockCoupon indicates an expected call of UnBlockCoupon.
func (mr *MockCouponRepositoryMockRecorder) UnBlockCoupon(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockCoupon", reflect.TypeOf((*MockCouponRepository)(nil).UnBlockCoupon), id)
}

// UpdateUserCount mocks base method.
func (m *MockCouponRepository) UpdateUserCount(couponId string, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCount", couponId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCount indicates an expected call of UpdateUserCount.
func (mr *MockCouponRepositoryMockRecorder) UpdateUserCount(couponId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCount", reflect.TypeOf((*MockCouponRepository)(nil).UpdateUserCount), couponId, userId)
}

// UsageCount mocks base method.
func (m *MockCouponRepository) UsageCount(couponId string, userId uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsageCount", couponId, userId)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsageCount indicates an expected call of UsageCount.
func (mr *MockCouponRepositoryMockRecorder) UsageCount(couponId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsageCount", reflect.TypeOf((*MockCouponRepository)(nil).UsageCount), couponId, userId)
}

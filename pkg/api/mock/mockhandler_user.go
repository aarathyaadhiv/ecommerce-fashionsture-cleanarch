// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/api/handler/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserHandler) AddAddress(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddress", c)
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserHandlerMockRecorder) AddAddress(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserHandler)(nil).AddAddress), c)
}

// Checkout mocks base method.
func (m *MockUserHandler) Checkout(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Checkout", c)
}

// Checkout indicates an expected call of Checkout.
func (mr *MockUserHandlerMockRecorder) Checkout(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockUserHandler)(nil).Checkout), c)
}

// ForgotPassword mocks base method.
func (m *MockUserHandler) ForgotPassword(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForgotPassword", c)
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserHandlerMockRecorder) ForgotPassword(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserHandler)(nil).ForgotPassword), c)
}

// LoginHandler mocks base method.
func (m *MockUserHandler) LoginHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoginHandler", c)
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockUserHandlerMockRecorder) LoginHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockUserHandler)(nil).LoginHandler), c)
}

// ResetPassword mocks base method.
func (m *MockUserHandler) ResetPassword(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetPassword", c)
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserHandlerMockRecorder) ResetPassword(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserHandler)(nil).ResetPassword), c)
}

// ShowAddress mocks base method.
func (m *MockUserHandler) ShowAddress(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowAddress", c)
}

// ShowAddress indicates an expected call of ShowAddress.
func (mr *MockUserHandlerMockRecorder) ShowAddress(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAddress", reflect.TypeOf((*MockUserHandler)(nil).ShowAddress), c)
}

// ShowDetails mocks base method.
func (m *MockUserHandler) ShowDetails(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowDetails", c)
}

// ShowDetails indicates an expected call of ShowDetails.
func (mr *MockUserHandlerMockRecorder) ShowDetails(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowDetails", reflect.TypeOf((*MockUserHandler)(nil).ShowDetails), c)
}

// SignUpHandler mocks base method.
func (m *MockUserHandler) SignUpHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUpHandler", c)
}

// SignUpHandler indicates an expected call of SignUpHandler.
func (mr *MockUserHandlerMockRecorder) SignUpHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpHandler", reflect.TypeOf((*MockUserHandler)(nil).SignUpHandler), c)
}

// UpdateAddress mocks base method.
func (m *MockUserHandler) UpdateAddress(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAddress", c)
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserHandlerMockRecorder) UpdateAddress(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserHandler)(nil).UpdateAddress), c)
}

// UpdateUserDetails mocks base method.
func (m *MockUserHandler) UpdateUserDetails(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserDetails", c)
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserHandlerMockRecorder) UpdateUserDetails(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserHandler)(nil).UpdateUserDetails), c)
}

// VerifyResetOtp mocks base method.
func (m *MockUserHandler) VerifyResetOtp(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VerifyResetOtp", c)
}

// VerifyResetOtp indicates an expected call of VerifyResetOtp.
func (mr *MockUserHandlerMockRecorder) VerifyResetOtp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResetOtp", reflect.TypeOf((*MockUserHandler)(nil).VerifyResetOtp), c)
}
